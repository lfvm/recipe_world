from django.test import TestCase
from .models import Recipe
from tags.models import Tag
class CreateRecipeTestCase(TestCase):
    def setUp(self):
        Recipe.objects.create(description="a recipe")

    def test_created_recipe(self):
      """Create a recipe. Autogenerated fields should not be empty"""
      recipe = Recipe.objects.get(description="a recipe")
      
      self.assertEqual(recipe.description, 'a recipe')
      self.assertIsNotNone(recipe.id)
      self.assertIsNotNone(recipe.created_at)
      self.assertIsNotNone(recipe.updated_at)
      self.assertIsNone(recipe.user)


class UpdateRecipeTestCase(TestCase):
    def setUp(self):
        self.recipe = Recipe.objects.create(description="a recipe")
        self.initial_updated_at = self.recipe.updated_at
        print(self.initial_updated_at)

    def test_update_recipe(self):
        
        recipe_id = self.recipe.id
        self.recipe.description = "hello world"
        self.recipe.save()

        recipe = Recipe.objects.get(id=recipe_id)
        self.assertEqual(recipe.description, "hello world")
        self.assertGreater(recipe.updated_at, self.initial_updated_at)


class DeleteRecipeTestCase(TestCase):
    def setUp(self):
        self.recipe = Recipe.objects.create(description="a recipe")
        self.recipe_id = self.recipe.id

    def test_delete_recipe(self):

        self.recipe.delete()
        with self.assertRaises(Recipe.DoesNotExist):
            Recipe.objects.get(id=self.recipe_id)



class RecipesWithTagsTests(TestCase):
    def setUp(self):

        self.tag1 = Tag.objects.create(name="tag1")
        self.tag2 = Tag.objects.create(name="tag2")
        self.tag3 = Tag.objects.create(name="tag3")
        r1 =Recipe.objects.create(description="a recipe",)
        r2 = Recipe.objects.create(description="a recipe2")

        r1.tags.add(self.tag1.id)
        r2.tags.add(self.tag2.id)

    def test_get_recipe_with_tag(self):
        """Get recipes with a tag"""
        recipes = Recipe.objects.filter(tags__id=self.tag1.id)
        self.assertEqual(len(recipes), 1)
        self.assertEqual(recipes[0].description, "a recipe")

        recipes = Recipe.objects.filter(tags__id=self.tag2.id)
        self.assertEqual(len(recipes), 1)
        self.assertEqual(recipes[0].description, "a recipe2")

    def test_empty_resuult(self):
        """Get recipes with a tag that does not exist"""
        recipes = Recipe.objects.filter(tags__id=self.tag3.id)
        self.assertEqual(len(recipes), 0)

    